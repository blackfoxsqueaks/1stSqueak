{
  "sksl": {
    "entrypoint": "liquid_glass_arbitrary_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float uSizeW;\nuniform float uSizeH;\nuniform float uForegroundSizeW;\nuniform float uForegroundSizeH;\nuniform float uChromaticAberration = 0.0;\nuniform float uGlassColorR;\nuniform float uGlassColorG;\nuniform float uGlassColorB;\nuniform float uGlassColorA;\nuniform float uLightAngle;\nuniform float uLightIntensity;\nuniform float uAmbientStrength;\nuniform float uThickness;\nuniform float uRefractiveIndex;\nuniform float uOffsetX;\nuniform float uOffsetY;\nuniform float uSaturation = 1.0;\nuniform float uLightness = 1.0;\nuniform float uGaussianBlur;\nuniform shader uBackgroundTexture;\nuniform half2 uBackgroundTexture_size;\nuniform shader uForegroundTexture;\nuniform half2 uForegroundTexture_size;\nuniform shader uForegroundBlurredTexture;\nuniform half2 uForegroundBlurredTexture_size;\n\nvec4 fragColor;\n\nvec2 uSize;\nvec2 uForegroundSize;\nvec4 uGlassColor;\nvec2 uOffset;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_approximateSDF(float blurredAlpha, float thickness)\n{\n    float normalizedDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    return (-normalizedDistance) * thickness;\n}\n\nvec2 FLT_flutter_local_findShapeCenter(vec2 currentUV)\n{\n    vec2 texelSize = vec2(2.0) / uForegroundSize;\n    vec2 centerSum = vec2(0.0);\n    float totalAlpha = 0.0;\n    int sampleRadius = 10;\n    int _1118 = -sampleRadius;\n    for (int y = _1118; y <= sampleRadius; y++)\n    {\n        int _1129 = -sampleRadius;\n        for (int x = _1129; x <= sampleRadius; x++)\n        {\n            vec2 sampleUV = currentUV + (vec2(float(x), float(y)) * texelSize);\n            bool _1150 = sampleUV.x >= 0.0;\n            bool _1156;\n            if (_1150)\n            {\n                _1156 = sampleUV.x <= 1.0;\n            }\n            else\n            {\n                _1156 = _1150;\n            }\n            bool _1162;\n            if (_1156)\n            {\n                _1162 = sampleUV.y >= 0.0;\n            }\n            else\n            {\n                _1162 = _1156;\n            }\n            bool _1168;\n            if (_1162)\n            {\n                _1168 = sampleUV.y <= 1.0;\n            }\n            else\n            {\n                _1168 = _1162;\n            }\n            if (_1168)\n            {\n                float alpha = uForegroundTexture.eval(uForegroundTexture_size * ( sampleUV)).w;\n                if (alpha > 0.100000001490116119384765625)\n                {\n                    centerSum += (sampleUV * alpha);\n                    totalAlpha += alpha;\n                }\n            }\n        }\n    }\n    vec2 _1196;\n    if (totalAlpha > 0.0)\n    {\n        _1196 = centerSum / vec2(totalAlpha);\n    }\n    else\n    {\n        _1196 = currentUV;\n    }\n    return _1196;\n}\n\nvec3 FLT_flutter_local_getReconstructedNormal(vec2 p, float thickness)\n{\n    vec2 uv = p / uForegroundSize;\n    if (uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 param = uv;\n    vec2 shapeCenter = FLT_flutter_local_findShapeCenter(param);\n    vec2 centerToPoint = uv - shapeCenter;\n    if (length(centerToPoint) < 0.001000000047497451305389404296875)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 outwardDirection = normalize(centerToPoint);\n    float blurredAlpha = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( uv)).w;\n    float sharpAlpha = uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w;\n    float edgeDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    float normalExponent = 0.20000000298023223876953125;\n    float normalZ = pow(edgeDistance, normalExponent);\n    float xyScale = sqrt(max(0.0, 1.0 - (normalZ * normalZ)));\n    return normalize(vec3(outwardDirection * xyScale, normalZ));\n}\n\nvec3 FLT_flutter_local_getNormal(vec2 p, float thickness)\n{\n    vec2 param = p;\n    float param_1 = thickness;\n    return FLT_flutter_local_getReconstructedNormal(param, param_1);\n}\n\nfloat FLT_flutter_local_getHeight(float sd, float thickness)\n{\n    if ((sd >= 0.0) || (thickness <= 0.0))\n    {\n        return 0.0;\n    }\n    if (sd < (-thickness))\n    {\n        return thickness;\n    }\n    float x = thickness + sd;\n    return sqrt(max(0.0, (thickness * thickness) - (x * x)));\n}\n\nfloat FLT_flutter_local_calculateDispersiveIndex(float baseIndex, float chromaticAberration, float wavelength)\n{\n    if (chromaticAberration < 0.001000000047497451305389404296875)\n    {\n        return baseIndex;\n    }\n    float wavelengthSq = wavelength * wavelength;\n    float wavelengthQuad = wavelengthSq * wavelengthSq;\n    float B = (chromaticAberration * 0.07999999821186065673828125) * (baseIndex - 1.0);\n    float C = (chromaticAberration * 0.0030000000260770320892333984375) * (baseIndex - 1.0);\n    return (baseIndex + (B / wavelengthSq)) + (C / wavelengthQuad);\n}\n\nvec4 FLT_flutter_local_applyKawaseBlur(shader tex, vec2 uv, vec2 texelSize, float blurRadius)\n{\n    if (blurRadius < 0.001000000047497451305389404296875)\n    {\n        return tex.eval(tex_size * ( uv));\n    }\n    vec4 color = vec4(0.0);\n    float totalWeight = 0.0;\n    float offset = blurRadius;\n    vec2 offsets1[4] = vec2[](vec2(-offset, -offset), vec2(offset, -offset), vec2(-offset, offset), vec2(offset));\n    for (int i = 0; i < 4; i++)\n    {\n        vec2 sampleUV = uv + (offsets1[i] * texelSize);\n        bool _215 = sampleUV.x >= 0.0;\n        bool _222;\n        if (_215)\n        {\n            _222 = sampleUV.x <= 1.0;\n        }\n        else\n        {\n            _222 = _215;\n        }\n        bool _229;\n        if (_222)\n        {\n            _229 = sampleUV.y >= 0.0;\n        }\n        else\n        {\n            _229 = _222;\n        }\n        bool _235;\n        if (_229)\n        {\n            _235 = sampleUV.y <= 1.0;\n        }\n        else\n        {\n            _235 = _229;\n        }\n        if (_235)\n        {\n            color += tex.eval(tex_size * ( sampleUV));\n            totalWeight += 1.0;\n        }\n    }\n    float offset2 = offset * 1.5;\n    vec2 offsets2[4] = vec2[](vec2(0.0, -offset2), vec2(0.0, offset2), vec2(-offset2, 0.0), vec2(offset2, 0.0));\n    for (int i_1 = 0; i_1 < 4; i_1++)\n    {\n        vec2 sampleUV_1 = uv + (offsets2[i_1] * texelSize);\n        bool _282 = sampleUV_1.x >= 0.0;\n        bool _288;\n        if (_282)\n        {\n            _288 = sampleUV_1.x <= 1.0;\n        }\n        else\n        {\n            _288 = _282;\n        }\n        bool _294;\n        if (_288)\n        {\n            _294 = sampleUV_1.y >= 0.0;\n        }\n        else\n        {\n            _294 = _288;\n        }\n        bool _300;\n        if (_294)\n        {\n            _300 = sampleUV_1.y <= 1.0;\n        }\n        else\n        {\n            _300 = _294;\n        }\n        if (_300)\n        {\n            color += (tex.eval(tex_size * ( sampleUV_1)) * 0.800000011920928955078125);\n            totalWeight += 0.800000011920928955078125;\n        }\n    }\n    float offset3 = offset * 0.699999988079071044921875;\n    vec2 offsets3[4] = vec2[](vec2(-offset3, 0.0), vec2(offset3, 0.0), vec2(0.0, -offset3), vec2(0.0, offset3));\n    for (int i_2 = 0; i_2 < 4; i_2++)\n    {\n        vec2 sampleUV_2 = uv + (offsets3[i_2] * texelSize);\n        bool _348 = sampleUV_2.x >= 0.0;\n        bool _354;\n        if (_348)\n        {\n            _354 = sampleUV_2.x <= 1.0;\n        }\n        else\n        {\n            _354 = _348;\n        }\n        bool _360;\n        if (_354)\n        {\n            _360 = sampleUV_2.y >= 0.0;\n        }\n        else\n        {\n            _360 = _354;\n        }\n        bool _366;\n        if (_360)\n        {\n            _366 = sampleUV_2.y <= 1.0;\n        }\n        else\n        {\n            _366 = _360;\n        }\n        if (_366)\n        {\n            color += (tex.eval(tex_size * ( sampleUV_2)) * 0.60000002384185791015625);\n            totalWeight += 0.60000002384185791015625;\n        }\n    }\n    color += (tex.eval(tex_size * ( uv)) * 2.0);\n    totalWeight += 2.0;\n    vec4 _391;\n    if (totalWeight > 0.0)\n    {\n        _391 = color / vec4(totalWeight);\n    }\n    else\n    {\n        _391 = tex.eval(tex_size * ( uv));\n    }\n    return _391;\n}\n\nvec4 FLT_flutter_local_calculateRefraction(vec2 screenUV, vec3 normal, float height, float thickness, float refractiveIndex, float chromaticAberration, vec2 uSize_1, shader backgroundTexture, float blurRadius, inout vec2 refractionDisplacement)\n{\n    float baseHeight = thickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    vec2 texelSize = vec2(1.0) / uSize_1;\n    vec4 refractColor;\n    if (chromaticAberration > 0.001000000047497451305389404296875)\n    {\n        float param = refractiveIndex;\n        float param_1 = chromaticAberration;\n        float param_2 = 0.680000007152557373046875;\n        float iorR = FLT_flutter_local_calculateDispersiveIndex(param, param_1, param_2);\n        float param_3 = refractiveIndex;\n        float param_4 = chromaticAberration;\n        float param_5 = 0.550000011920928955078125;\n        float iorG = FLT_flutter_local_calculateDispersiveIndex(param_3, param_4, param_5);\n        float param_6 = refractiveIndex;\n        float param_7 = chromaticAberration;\n        float param_8 = 0.4199999868869781494140625;\n        float iorB = FLT_flutter_local_calculateDispersiveIndex(param_6, param_7, param_8);\n        vec3 refractVecR = refract(incident, normal, 1.0 / iorR);\n        float refractLengthR = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecR.z));\n        vec2 refractedUVR = screenUV + ((refractVecR.xy * refractLengthR) / uSize_1);\n        float _741;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_9 = refractedUVR;\n            vec2 param_10 = texelSize;\n            float param_11 = blurRadius;\n            _741 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_9, param_10, param_11).x;\n        }\n        else\n        {\n            _741 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVR)).x;\n        }\n        float red = _741;\n        vec3 refractVecG = refract(incident, normal, 1.0 / iorG);\n        float refractLengthG = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecG.z));\n        refractionDisplacement = refractVecG.xy * refractLengthG;\n        vec2 refractedUVG = screenUV + (refractionDisplacement / uSize_1);\n        vec4 _786;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_12 = refractedUVG;\n            vec2 param_13 = texelSize;\n            float param_14 = blurRadius;\n            _786 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_12, param_13, param_14);\n        }\n        else\n        {\n            _786 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVG));\n        }\n        vec4 greenSample = _786;\n        float green = greenSample.y;\n        float bgAlpha = greenSample.w;\n        vec3 refractVecB = refract(incident, normal, 1.0 / iorB);\n        float refractLengthB = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVecB.z));\n        vec2 refractedUVB = screenUV + ((refractVecB.xy * refractLengthB) / uSize_1);\n        float _835;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_15 = refractedUVB;\n            vec2 param_16 = texelSize;\n            float param_17 = blurRadius;\n            _835 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_15, param_16, param_17).z;\n        }\n        else\n        {\n            _835 = backgroundTexture.eval(backgroundTexture_size * ( refractedUVB)).z;\n        }\n        float blue = _835;\n        refractColor = vec4(red, green, blue, bgAlpha);\n    }\n    else\n    {\n        vec3 refractVec = refract(incident, normal, 1.0 / refractiveIndex);\n        float refractLength = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(refractVec.z));\n        refractionDisplacement = refractVec.xy * refractLength;\n        vec2 refractedUV = screenUV + (refractionDisplacement / uSize_1);\n        vec4 _886;\n        if (blurRadius > 0.001000000047497451305389404296875)\n        {\n            vec2 param_18 = refractedUV;\n            vec2 param_19 = texelSize;\n            float param_20 = blurRadius;\n            _886 = FLT_flutter_local_applyKawaseBlur(backgroundTexture, param_18, param_19, param_20);\n        }\n        else\n        {\n            _886 = backgroundTexture.eval(backgroundTexture_size * ( refractedUV));\n        }\n        refractColor = _886;\n    }\n    return refractColor;\n}\n\nvec3 FLT_flutter_local_getHighlightColor(vec3 backgroundColor, float targetBrightness)\n{\n    float luminance = dot(backgroundColor, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    float maxComponent = max(max(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float minComponent = min(min(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float _434;\n    if (maxComponent > 0.0)\n    {\n        _434 = (maxComponent - minComponent) / maxComponent;\n    }\n    else\n    {\n        _434 = 0.0;\n    }\n    float saturation = _434;\n    vec3 coloredHighlight = vec3(targetBrightness);\n    if (luminance > 0.001000000047497451305389404296875)\n    {\n        vec3 normalizedBackground = backgroundColor / vec3(luminance);\n        coloredHighlight = normalizedBackground * targetBrightness;\n        float saturationBoost = 1.2999999523162841796875;\n        vec3 gray = vec3(dot(coloredHighlight, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));\n        coloredHighlight = mix(gray, coloredHighlight, vec3(saturationBoost));\n        coloredHighlight = min(coloredHighlight, vec3(1.0));\n    }\n    float luminanceFactor = smoothstep(0.0, 0.60000002384185791015625, luminance);\n    float saturationFactor = smoothstep(0.0, 0.4000000059604644775390625, saturation);\n    float colorInfluence = luminanceFactor * saturationFactor;\n    vec3 whiteHighlight = vec3(targetBrightness);\n    return mix(whiteHighlight, coloredHighlight, vec3(colorInfluence));\n}\n\nvec3 FLT_flutter_local_calculateLighting(vec2 uv, vec3 normal, float sd, float thickness, float lightAngle, float lightIntensity, float ambientStrength, vec3 backgroundColor)\n{\n    float param = sd;\n    float param_1 = thickness;\n    float height = FLT_flutter_local_getHeight(param, param_1);\n    float _534;\n    if (thickness > 0.0)\n    {\n        _534 = height / thickness;\n    }\n    else\n    {\n        _534 = 0.0;\n    }\n    float normalizedHeight = _534;\n    float shape = smoothstep(0.0, 0.89999997615814208984375, 1.0 - normalizedHeight);\n    if (shape < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float thicknessFactor = smoothstep(5.0, 7.0, thickness);\n    if (thicknessFactor < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float rimWidth = 3.0;\n    float rimFactor = exp(((-sd) * sd) / ((2.0 * rimWidth) * rimWidth));\n    vec2 lightDir2D = vec2(cos(lightAngle), sin(lightAngle));\n    float mainLightInfluence = max(0.0, dot(normalize(normal.xy), lightDir2D));\n    float oppositeLightInfluence = max(0.0, dot(normalize(normal.xy), -lightDir2D));\n    float totalInfluence = mainLightInfluence + (oppositeLightInfluence * 0.800000011920928955078125);\n    vec3 param_2 = backgroundColor;\n    float param_3 = 0.699999988079071044921875;\n    vec3 highlightColor = FLT_flutter_local_getHighlightColor(param_2, param_3);\n    vec3 directionalRim = ((highlightColor * pow(totalInfluence, 2.0)) * lightIntensity) * 2.0;\n    vec3 param_4 = backgroundColor;\n    float param_5 = 0.4000000059604644775390625;\n    vec3 ambientRim = FLT_flutter_local_getHighlightColor(param_4, param_5) * ambientStrength;\n    vec3 totalRimLight = (directionalRim + ambientRim) * rimFactor;\n    return (totalRimLight * thicknessFactor) * shape;\n}\n\nvec4 FLT_flutter_local_applyGlassColor(vec4 liquidColor, vec4 glassColor)\n{\n    vec4 finalColor = liquidColor;\n    if (glassColor.w > 0.0)\n    {\n        float glassLuminance = dot(glassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (glassColor.xyz * 2.0);\n            vec3 _953 = mix(liquidColor.xyz, darkened, vec3(glassColor.w));\n            finalColor.x = _953.x;\n            finalColor.y = _953.y;\n            finalColor.z = _953.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - glassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _980 = mix(liquidColor.xyz, screened, vec3(glassColor.w));\n            finalColor.x = _980.x;\n            finalColor.y = _980.y;\n            finalColor.z = _980.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    return finalColor;\n}\n\nvec3 FLT_flutter_local_applySaturationLightness(vec3 color, float saturation, float lightness)\n{\n    float luminance = dot(color, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    vec3 saturatedColor = mix(vec3(luminance), color, vec3(saturation));\n    vec3 adjustedColor = saturatedColor * lightness;\n    return clamp(adjustedColor, vec3(0.0), vec3(1.0));\n}\n\nvec4 FLT_flutter_local_renderLiquidGlass(vec2 screenUV, vec2 p, vec2 uSize_1, float sd, float thickness, float refractiveIndex, float chromaticAberration, vec4 glassColor, float lightAngle, float lightIntensity, float ambientStrength, shader backgroundTexture, vec3 normal, float foregroundAlpha, float gaussianBlur, float saturation, float lightness)\n{\n    if (foregroundAlpha < 0.001000000047497451305389404296875)\n    {\n        return backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    }\n    if (thickness < 0.00999999977648258209228515625)\n    {\n        return backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    }\n    float param = sd;\n    float param_1 = thickness;\n    float height = FLT_flutter_local_getHeight(param, param_1);\n    vec2 param_2 = screenUV;\n    vec3 param_3 = normal;\n    float param_4 = height;\n    float param_5 = thickness;\n    float param_6 = refractiveIndex;\n    float param_7 = chromaticAberration;\n    vec2 param_8 = uSize_1;\n    float param_9 = gaussianBlur;\n    vec2 param_10;\n    vec4 _1034 = FLT_flutter_local_calculateRefraction(param_2, param_3, param_4, param_5, param_6, param_7, param_8, backgroundTexture, param_9, param_10);\n    vec2 refractionDisplacement = param_10;\n    vec4 refractColor = _1034;\n    vec4 liquidColor = refractColor;\n    vec4 backgroundColor = backgroundTexture.eval(backgroundTexture_size * ( screenUV));\n    vec2 param_11 = screenUV;\n    vec3 param_12 = normal;\n    float param_13 = sd;\n    float param_14 = thickness;\n    float param_15 = lightAngle;\n    float param_16 = lightIntensity;\n    float param_17 = ambientStrength;\n    vec3 param_18 = backgroundColor.xyz;\n    vec3 lighting = FLT_flutter_local_calculateLighting(param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18);\n    vec4 param_19 = liquidColor;\n    vec4 param_20 = glassColor;\n    vec4 finalColor = FLT_flutter_local_applyGlassColor(param_19, param_20);\n    vec4 _1068 = finalColor;\n    vec3 _1070 = _1068.xyz + lighting;\n    finalColor.x = _1070.x;\n    finalColor.y = _1070.y;\n    finalColor.z = _1070.z;\n    vec3 param_21 = finalColor.xyz;\n    float param_22 = saturation;\n    float param_23 = lightness;\n    vec3 _1084 = FLT_flutter_local_applySaturationLightness(param_21, param_22, param_23);\n    finalColor.x = _1084.x;\n    finalColor.y = _1084.y;\n    finalColor.z = _1084.z;\n    return mix(backgroundColor, finalColor, vec4(foregroundAlpha));\n}\n\nvoid FLT_main()\n{\n    uSize = vec2(uSizeW, uSizeH);\n    uForegroundSize = vec2(uForegroundSizeW, uForegroundSizeH);\n    uGlassColor = vec4(uGlassColorR, uGlassColorG, uGlassColorB, uGlassColorA);\n    uOffset = vec2(uOffsetX, uOffsetY);\n    vec2 screenUV_1 = FLT_flutter_local_FlutterFragCoord() / uSize;\n    vec2 layerLocalCoord = FLT_flutter_local_FlutterFragCoord() - uOffset;\n    vec2 layerUV = layerLocalCoord / uForegroundSize;\n    bool _1296 = layerUV.x < 0.0;\n    bool _1303;\n    if (!_1296)\n    {\n        _1303 = layerUV.x > 1.0;\n    }\n    else\n    {\n        _1303 = _1296;\n    }\n    bool _1310;\n    if (!_1303)\n    {\n        _1310 = layerUV.y < 0.0;\n    }\n    else\n    {\n        _1310 = _1303;\n    }\n    bool _1317;\n    if (!_1310)\n    {\n        _1317 = layerUV.y > 1.0;\n    }\n    else\n    {\n        _1317 = _1310;\n    }\n    if (_1317)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 foregroundColor = uForegroundTexture.eval(uForegroundTexture_size * ( layerUV));\n    if (foregroundColor.w < 0.001000000047497451305389404296875)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 blurred = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( layerUV));\n    float param_24 = blurred.w;\n    float param_25 = uThickness;\n    float sd_1 = FLT_flutter_local_approximateSDF(param_24, param_25);\n    vec2 param_26 = layerLocalCoord;\n    float param_27 = uThickness;\n    vec3 normal_1 = FLT_flutter_local_getNormal(param_26, param_27);\n    vec2 param_28 = screenUV_1;\n    vec2 param_29 = FLT_flutter_local_FlutterFragCoord();\n    vec2 param_30 = uSize;\n    float param_31 = sd_1;\n    float param_32 = uThickness;\n    float param_33 = uRefractiveIndex;\n    float param_34 = uChromaticAberration;\n    vec4 param_35 = uGlassColor;\n    float param_36 = uLightAngle;\n    float param_37 = uLightIntensity;\n    float param_38 = uAmbientStrength;\n    vec3 param_39 = normal_1;\n    float param_40 = foregroundColor.w;\n    float param_41 = uGaussianBlur;\n    float param_42 = uSaturation;\n    float param_43 = uLightness;\n    fragColor = FLT_flutter_local_renderLiquidGlass(param_28, param_29, param_30, param_31, param_32, param_33, param_34, param_35, param_36, param_37, param_38, uBackgroundTexture, param_39, param_40, param_41, param_42, param_43);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBackgroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uSizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 1,
        "name": "uForegroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uForegroundSizeW",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 2,
        "name": "uForegroundBlurredTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uForegroundSizeH",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uChromaticAberration",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uGlassColorR",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uGlassColorG",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uGlassColorB",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uGlassColorA",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "uLightAngle",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "uLightIntensity",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 11,
        "name": "uAmbientStrength",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 12,
        "name": "uThickness",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 13,
        "name": "uRefractiveIndex",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 14,
        "name": "uOffsetX",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 15,
        "name": "uOffsetY",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 16,
        "name": "uSaturation",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 17,
        "name": "uLightness",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 18,
        "name": "uGaussianBlur",
        "rows": 1,
        "type": 10
      }
    ]
  }
}